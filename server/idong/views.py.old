from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from idong.models import User, Party, UserParty
from idong.serializers import UserSerializer, PartySerializer, UserPartySerializer


@api_view(['GET', 'POST'])
def user_list(request, format=None):
    if request.method == 'GET':
        users = User.objects.all()
        serializer = UserSerializer(users)
        return Response(serializer.data)

    elif request.method == 'POST':
        data = Parser().parse(request)
        serializer = UserSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        else:
            return Response(serializer.errors, status=400)


@api_view(['GET', 'POST'])
def party_list(request, format=None):
    if request.method == 'GET':
        parties = Party.objects.all()
        serializer = PartySerializer(parties)
        return Response(serializer.data)
    elif request.method == 'POST':
        data = Parser().parse(request)
        serializer = PartySerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        else:
            return Response(serializer.errors, status=400)

@api_view(['GET', 'PUT', 'DELETE'])
def party_detail(request, pk, format=None):
    try:
        party = Party.objects.get(pk=pk)
    except Party.DoesNotExist:
        return HttpResponse(status=404)

    if request.method == 'GET':
        serializer = PartySerializer(party)
        return Response(serializer.data)

    elif request.method == 'PUT':
        data = Parser().parse(request)
        serializer = PartySerializer(party, data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        else:
            return Response(serializer.errors, status=400)

    elif request.method == 'DELETE':
        party.delete()
        return HttpResponse(status=204)

@api_view(['GET'])
def user_party(request, userid, format=None):
    try:
        parties = UserParty.objects.get(user=userid)
    except UserParty.DoesNotExist:
        return HttpResponse(status=404)

    if request.method == 'GET':
        serializer = UserPartySerializer(parties)
        return Response(serializer.data)
